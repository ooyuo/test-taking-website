'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');

// ed = elementData, we use getEd a lot
// WeakMap for edge cases where many elements are targeted
// Not a big deal if it's shimmed as Map
var ed = exports.ed = new WeakMap();
var getEd = exports.getEd = function getEd() {
  var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;

  if (ed.has(element)) {
    return ed.get(element);
  }

  var classCounts = new Map();
  var styleLevels = new Map();

  var incrClassCount = function incrClassCount(key) {
    if (classCounts.has(key)) {
      classCounts.set(key, classCounts.get(key) + 1);
    } else {
      classCounts.set(key, 1);
    }
  };

  var decrClassCount = function decrClassCount(key) {
    classCounts.set(key, classCounts.get(key) - 1);
  };

  var addStyleLevel = function addStyleLevel(key, value) {
    if (styleLevels.has(key)) {
      styleLevels.set(key, styleLevels.get(key).concat([value]));
    } else {
      var items = [value];
      if (element.style[key]) items.unshift(element.style[key]);
      styleLevels.set(key, items);
    }
  };

  var removeStyleLevel = function removeStyleLevel(key, value) {
    if (styleLevels.has(key)) {
      var styles = styleLevels.get(key);
      var newStyles = styles.slice(0, -1);

      styleLevels.set(key, newStyles);
    }
  };

  var data = {
    classCounts: classCounts,
    styleLevels: styleLevels,

    incrClassCount: incrClassCount,
    decrClassCount: decrClassCount,

    addStyleLevel: addStyleLevel,
    removeStyleLevel: removeStyleLevel
  };
  ed.set(element, data);
  return data;
};

// Private. Used for the unit tests.
var reset = exports.reset = function reset() {
  exports.ed = ed = new WeakMap();
};

var splitClasses = function splitClasses(classes) {
  if (!classes) return [];
  if (Array.isArray(classes)) return classes.filter(Boolean);
  return classes.split(/\s+/g).filter(Boolean);
};

var ReactGlobalStyle = function (_React$Component) {
  _inherits(ReactGlobalStyle, _React$Component);

  function ReactGlobalStyle() {
    _classCallCheck(this, ReactGlobalStyle);

    return _possibleConstructorReturn(this, (ReactGlobalStyle.__proto__ || Object.getPrototypeOf(ReactGlobalStyle)).apply(this, arguments));
  }

  _createClass(ReactGlobalStyle, [{
    key: 'el',
    value: function el() {
      var el = document.body;
      if (typeof this.props.el === 'string') {
        el = document.querySelector(this.props.el);
      }
      if (_typeof(this.props.el) === 'object' && this.props.el) {
        el = this.props.el;
      }
      return el;
    }
  }, {
    key: 'ed',
    value: function ed() {
      return getEd(this.el());
    }
  }, {
    key: 'updateClasses',
    value: function updateClasses(classes, oldClasses) {
      var _this2 = this;

      classes.forEach(function (a) {
        if (oldClasses.indexOf(a) === -1) {
          _this2.ed().incrClassCount(a);
          _this2.el().classList.add(a);
        }
      });

      oldClasses.forEach(function (b) {
        if (classes.indexOf(b) === -1) {
          _this2.ed().decrClassCount(b);
          if (!_this2.ed().classCounts.get(b)) {
            _this2.el().classList.remove(b);
          }
        }
      });
    }
  }, {
    key: 'updateStyles',
    value: function updateStyles(style, oldStyle) {
      if (!style) style = {};
      if (!oldStyle) oldStyle = {};
      var el = this.el();
      var ed = this.ed();

      Object.keys(style).forEach(function (a) {
        // Check if this is a new style
        if (!oldStyle[a] && oldStyle[a] !== 0) {
          ed.addStyleLevel(a, style[a]);
          el.style[a] = style[a];
        }
      });

      Object.keys(oldStyle).forEach(function (b) {
        // Remove the style by peeling back a layer
        if (!style[b] && style[b] !== 0) {
          ed.removeStyleLevel(b);
          var levels = ed.styleLevels.get(b);
          if (levels && levels.length) {
            el.style[b] = levels[levels.length - 1];
          } else {
            el.style[b] = '';
          }
        }
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateClasses(splitClasses(this.props.className), []);
      this.updateStyles(this.props.style, {});
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.updateClasses(splitClasses(nextProps.className), splitClasses(this.props.className));
      this.updateStyles(nextProps.style, this.props.style);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.updateClasses([], splitClasses(this.props.className));
      this.updateStyles({}, this.props.style);
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return ReactGlobalStyle;
}(React.Component);

exports.default = ReactGlobalStyle;