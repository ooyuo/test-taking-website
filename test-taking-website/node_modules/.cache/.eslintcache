[{"C:\\Users\\doyoun\\test-taking-website\\test-taking-website\\src\\index.js":"1","C:\\Users\\doyoun\\test-taking-website\\test-taking-website\\src\\App.js":"2","C:\\Users\\doyoun\\test-taking-website\\test-taking-website\\src\\Router.js":"3","C:\\Users\\doyoun\\test-taking-website\\test-taking-website\\src\\routes\\TestResult.js":"4","C:\\Users\\doyoun\\test-taking-website\\test-taking-website\\src\\routes\\TestDisplay.js":"5"},{"size":255,"mtime":1665131795584,"results":"6","hashOfConfig":"7"},{"size":218,"mtime":1665090753941,"results":"8","hashOfConfig":"7"},{"size":533,"mtime":1665134384335,"results":"9","hashOfConfig":"7"},{"size":845,"mtime":1665129924997,"results":"10","hashOfConfig":"7"},{"size":4369,"mtime":1665134378631,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"1l5ii8z",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"15"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"C:\\Users\\doyoun\\test-taking-website\\test-taking-website\\src\\index.js",[],[],[],"C:\\Users\\doyoun\\test-taking-website\\test-taking-website\\src\\App.js",[],[],"C:\\Users\\doyoun\\test-taking-website\\test-taking-website\\src\\Router.js",[],[],"C:\\Users\\doyoun\\test-taking-website\\test-taking-website\\src\\routes\\TestResult.js",["30","31","32","33"],[],"import \"../css/TestDisplay.css\";\r\nimport \"../css/TestResult.css\";\r\nimport { useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nfunction TestResult() {\r\n  const text = useLocation();\r\n  const answer = text.state.answer;\r\n\r\n  console.log(answer + \"dd\");\r\n  return (\r\n    <>\r\n      {answer == \"concat\" ? (\r\n        <div className=\"wrapper-img\">\r\n          <img\r\n            src={require(\"../icons/successfully-done.gif\")}\r\n            width=\"500\"\r\n            height=\"500\"\r\n          />\r\n          <div className=\"correct\">Correct !</div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"wrapper-img\">\r\n          <img src={require(\"../icons/fail.gif\")} width=\"500\" height=\"500\" />\r\n          <div className=\"incorrect\">{`Incorrect :(`}</div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TestResult;\r\n","C:\\Users\\doyoun\\test-taking-website\\test-taking-website\\src\\routes\\TestDisplay.js",["34","35","36","37","38","39","40","41"],[],"import \"../css/TestDisplay.css\";\r\nimport styled from \"styled-components\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction TestDisplay() {\r\n  let [text, setText] = useState(\"______\");\r\n  const changeText = (e) => {\r\n    text = e.target.value;\r\n    setText(text);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <header>\r\n          <div>\r\n            <img src={require(\"../icons/test.png\")} width=\"40\" height=\"40\" />\r\n          </div>\r\n\r\n          <div className=\"qustion-btn\">\r\n            <Link\r\n              className=\"link\"\r\n              to={{\r\n                pathname: `/test-taking-website/result/`,\r\n                state: { answer: text },\r\n              }}\r\n            >\r\n              <span>SUBMIT</span>\r\n              <img\r\n                src={require(\"../icons/right-arrow.gif\")}\r\n                width=\"30\"\r\n                height=\"30\"\r\n              />\r\n            </Link>\r\n          </div>\r\n        </header>\r\n      </div>\r\n      <main>\r\n        <div className=\"container\">\r\n          <div className=\"main--question_number\">\r\n            Question - Merge multiple arrays together\r\n          </div>\r\n          <div className=\"main--question_text\">Choose appropriate options.</div>\r\n          <div className=\"question\">\r\n            <span className=\"block--blue\">const </span>fruits = [\r\n            <span className=\"block--green\">\r\n              'Apple', 'Banana', 'Strawberry'\r\n            </span>\r\n            ];\r\n            <br />\r\n            <span className=\"block--blue\">const</span> moreFruits = [\r\n            <span className=\"block--green\">'Mango', 'Cherry'</span>];\r\n            <br />\r\n            <span className=\"block--blue\">const </span>combinedFruits = fruits.\r\n            <span className=\"block--red\">\r\n              <span className=\"yourAnswer\" value={text}>\r\n                {text}\r\n              </span>\r\n            </span>\r\n            (moreFruits);\r\n            <br />\r\n            console.<span className=\"block--red\">log</span>(combinedFruits);\r\n            <br />\r\n            <span className=\"block--grey\">\r\n              // [\"Apple\", \"Banana\", \"Strawberry\", \"Mango\", \"Cherry\"]\r\n            </span>\r\n            <br />\r\n            <br />\r\n            <span className=\"block--grey\">\r\n              // The 'fruits' array remains unchanged.\r\n            </span>\r\n            <br />\r\n            console.<span className=\"block--red\">log</span>(fruits);\r\n            <br />\r\n            <span className=\"block--grey\">\r\n              // The 'fruits' array remains unchanged.\r\n            </span>\r\n            <br /> <br />\r\n            <span className=\"block--grey\">\r\n              // The 'moreFruits' array also remains unchanged.\r\n            </span>\r\n            <br />\r\n            console.<span className=\"block--red\">log</span>(moreFruits);\r\n            <br />\r\n            <span className=\"block--grey\">// [\"Mango\", \"Cherry\"]</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"question--item\">\r\n            <button className=\"item\" value=\"push\" onClick={changeText}>\r\n              push\r\n            </button>\r\n            <button className=\"item\" value=\"shift\" onClick={changeText}>\r\n              shift\r\n            </button>\r\n            <button className=\"item\" value=\"concat\" onClick={changeText}>\r\n              concat\r\n            </button>\r\n            <button className=\"item\" value=\"map\" onClick={changeText}>\r\n              map\r\n            </button>\r\n            <button className=\"item\" value=\"reduce\" onClick={changeText}>\r\n              reduce\r\n            </button>\r\n            <button className=\"item\" value=\"slice\" onClick={changeText}>\r\n              slice\r\n            </button>\r\n            <button className=\"item\" value=\"splice\" onClick={changeText}>\r\n              splice\r\n            </button>\r\n            <button className=\"item\" value=\"sort\" onClick={changeText}>\r\n              sort\r\n            </button>\r\n            <button className=\"item\" value=\"every\" onClick={changeText}>\r\n              every\r\n            </button>\r\n            <button className=\"item\" value=\"flatMap\" onClick={changeText}>\r\n              flatMap\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </main>\r\n      <footer></footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TestDisplay;\r\n",{"ruleId":"42","severity":1,"message":"43","line":3,"column":10,"nodeType":"44","messageId":"45","endLine":3,"endColumn":18},{"ruleId":"46","severity":1,"message":"47","line":13,"column":15,"nodeType":"48","messageId":"49","endLine":13,"endColumn":17},{"ruleId":"50","severity":1,"message":"51","line":15,"column":11,"nodeType":"52","endLine":19,"endColumn":13},{"ruleId":"50","severity":1,"message":"51","line":24,"column":11,"nodeType":"52","endLine":24,"endColumn":78},{"ruleId":"42","severity":1,"message":"53","line":2,"column":8,"nodeType":"44","messageId":"45","endLine":2,"endColumn":14},{"ruleId":"50","severity":1,"message":"51","line":18,"column":13,"nodeType":"52","endLine":18,"endColumn":78},{"ruleId":"50","severity":1,"message":"51","line":30,"column":15,"nodeType":"52","endLine":34,"endColumn":17},{"ruleId":"54","severity":1,"message":"55","line":65,"column":43,"nodeType":"56","messageId":"57","endLine":67,"endColumn":13},{"ruleId":"54","severity":1,"message":"55","line":70,"column":43,"nodeType":"56","messageId":"57","endLine":72,"endColumn":13},{"ruleId":"54","severity":1,"message":"55","line":76,"column":43,"nodeType":"56","messageId":"57","endLine":78,"endColumn":13},{"ruleId":"54","severity":1,"message":"55","line":80,"column":43,"nodeType":"56","messageId":"57","endLine":82,"endColumn":13},{"ruleId":"54","severity":1,"message":"55","line":86,"column":43,"nodeType":"56","messageId":"57","endLine":86,"endColumn":65},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'styled' is defined but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","putCommentInBraces"]